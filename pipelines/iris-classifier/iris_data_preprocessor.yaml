# PIPELINE DEFINITION
# Name: data-preprocessing
# Inputs:
#    input_file: system.Artifact
# Outputs:
#    output_csv: system.Dataset
#    preprocessor_artifact: system.Artifact
components:
  comp-data-preprocessing:
    executorLabel: exec-data-preprocessing
    inputDefinitions:
      artifacts:
        input_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        preprocessor_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-data-preprocessing:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - data_preprocessing
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==1.3.1'\
          \ 'joblib==1.3.2' 'pandas==1.1.4' 'numpy==1.26.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef data_preprocessing(\n    input_file: Input[Artifact] ,\n    output_csv:\
          \ Output[Dataset] ,\n    preprocessor_artifact: Output[Artifact]\n):\n \
          \ \"\"\"\n  data preprocessing :\n    1. numeric column scaling\n    2.\
          \ categorical column encoding\n    3. split dataset into train/dev sets\n\
          \n    define a sklearn preprocessing pipeline for above\n  \"\"\"\n\n  import\
          \ pandas as pd\n  import numpy as np\n  from sklearn.compose import ColumnTransformer\n\
          \  from sklearn.feature_selection import SelectPercentile, chi2\n  from\
          \ sklearn.impute import SimpleImputer\n  from sklearn.linear_model import\
          \ LogisticRegression\n  from sklearn.model_selection import RandomizedSearchCV,\
          \ train_test_split\n  from sklearn.pipeline import Pipeline\n  from sklearn.preprocessing\
          \ import OneHotEncoder, StandardScaler , LabelEncoder , OrdinalEncoder\n\
          \  import joblib\n\n  # load dataset\n  df_iris = pd.read_csv( input_file.path\
          \ ,\n                         names= [ 'petal_length', 'petal_width', 'sepal_length',\
          \ \n                                 'sepal_width' , 'species_type' ] ,\n\
          \                         header= None)\n  # fix random seed\n  np.random.seed(0)\n\
          \n  # define numeric column and preprocessing methods\n  numeric_features\
          \ = ['petal_length', 'petal_width', 'sepal_length', 'sepal_width' ]\n  numeric_transformer\
          \ = Pipeline(\n      steps=[ # we can define multiple steps \n         \
          \   (\"scaler\", StandardScaler())\n            ]\n  )\n\n  # define categorical\
          \ columns and preprocessing\n  categorical_features = [ 'species_type' ]\n\
          \  categorical_transformer = Pipeline(\n      steps=[\n          (\"encoder\"\
          , OrdinalEncoder())\n      ]\n  )\n\n  # define column transformer object\n\
          \  preprocessor = ColumnTransformer(\n      transformers=[\n          (\"\
          num\", numeric_transformer, numeric_features),\n          (\"cat\", categorical_transformer,\
          \ categorical_features),\n      ]\n  )\n\n  # transform the dataset\n  transformed_data\
          \ =  preprocessor.fit_transform( df_iris )\n\n  # convert dataset to a csv\
          \ file\n  df_transformed = pd.DataFrame(\n                          data\
          \ = transformed_data ,\n                          columns= [ 'petal_length',\
          \ 'petal_width', 'sepal_length', \n                                    \
          \  'sepal_width' , 'species_type' ] \n\n                      )\n\n  # save\
          \ dataset\n  df_transformed.to_csv(output_csv.path ,\n                 \
          \       index=False)\n\n  # save the custom preprocessor\n  joblib.dump(preprocessor,\
          \ preprocessor_artifact.path )\n\n  # Done !\n\n"
        image: python:3.9
pipelineInfo:
  name: data-preprocessing
root:
  dag:
    outputs:
      artifacts:
        output_csv:
          artifactSelectors:
          - outputArtifactKey: output_csv
            producerSubtask: data-preprocessing
        preprocessor_artifact:
          artifactSelectors:
          - outputArtifactKey: preprocessor_artifact
            producerSubtask: data-preprocessing
    tasks:
      data-preprocessing:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-preprocessing
        inputs:
          artifacts:
            input_file:
              componentInputArtifact: input_file
        taskInfo:
          name: data-preprocessing
  inputDefinitions:
    artifacts:
      input_file:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      output_csv:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      preprocessor_artifact:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
